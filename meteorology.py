import glob
import re
import pandas as pd
import sys
from transliterate import translit


# Настройка правильного вывода таблицы данных (при True совершается перенос на другую строку, что ломает вид таблицы
pd.set_option("display.expand_frame_repr", False)
# Функция, улучшающая процесс считывания файлов (помогает программе считывать числа в названиях файлов отдельно)
numbers = re.compile(r"(\d+)")


def numericalSort(value):
    parts = numbers.split(value)
    parts[1::2] = map(int, parts[1::2])
    return parts


# Считывается название города, транслитирируется на английский и прокладывается путь к файлам, связанным с этим городом
city = str(input("Введите название города: "))
# Транслитерация названия города на английский язык
city_trans = translit(city, "ru", reversed=True).replace("'", "").replace("zh", "g")
path = "C:/Users/bonda/Desktop/Практика 2024/Practice/meteo"
filenames = glob.glob(path + "/" + city_trans + "/*.csv")
# При помощи ранее описанной функции сортируются файлы таким образом,
# чтобы номера месяцев считывались отдельно и шли по порядку
filenames = sorted(filenames, key=numericalSort)
# Создаётся файл по имени нужного города и тут же очищается, чтобы не допустить накопления данных с предыдущих запросов
temporal = open(city_trans + ".csv", "w")
temporal.close()
ym = []
if not filenames:
    sys.exit("Ошибка 1: неправильное название города")
for filename in filenames:
    # Производится обработка названий файлов для получения необходимых дат и запись их в список "ym"
    match = filename.split("_")
    year = match[1]
    month = match[2].split(".")[0]
    ym.append(year + "/" + month)
    # Считывание столбцов со значениями ветра
    wind = pd.read_csv(filename, usecols=["Ветер вечером", "Ветер днём"])
    # Далее происходит отбрасывание букв направления ветра и единицы измерения (м/с) и преобразование данных в числовой тип.
    wind[["Ветер вечером", "Ветер днём"]] = wind[["Ветер вечером", "Ветер днём"]].apply(
        lambda x: x.str.replace("Ш", "0", regex=False)
        .str.replace(r"[А-Яа-ям/с]", "", regex=True)
        .astype(int)
    )
    # replace удаляют ненужные буквы, обозначающие направление ветра и приравнивают штиль к нулевому значению.
    # astype превращает получившиеся "голые" цифры в числовой тип .
    # Температура и давление сразу даны в числовом виде и потому не требуют дополнительных операций.
    temp = pd.read_csv(filename, usecols=["Температура вечером", "Температура днём"])
    pres = pd.read_csv(filename, usecols=["Давление вечером", "Давление днём"])
    # Создаётся таблица с заголовками и в неё добавляются средние значения для текущего месяца и года.
    results = pd.DataFrame(
        {
            "Ср. скорость ветра днём (м/с)": [round(wind["Ветер днём"].mean(), 2)],
            "Ср. скорость ветра вечером (м/с)": [
                round(wind["Ветер вечером"].mean(), 2)
            ],
            "Ср. температура днём (°C)": [round(temp["Температура днём"].mean(), 2)],
            "Ср. температура вечером (°C)": [
                round(temp["Температура вечером"].mean(), 2)
            ],
            "Ср. давление днём (мм рт. ст.)": [round(pres["Давление днём"].mean(), 2)],
            "Ср. давление вечером (мм рт. ст.)": [
                round(pres["Давление вечером"].mean(), 2)
            ],
        }
    )
    # Таблица добавляется в файл, который будет выводиться пользователю.
    results.to_csv(city_trans + ".csv", index=False, mode="a", header=False)
# Считывается файл с результатами, и его колонкам присваиваются названия
true_results = pd.read_csv(
    city_trans + ".csv",
    names=[
        "Ср. скорость ветра днём (м/с)",
        "Ср. скорость ветра вечером (м/с)",
        "Ср. температура днём (°C)",
        "Ср. температура вечером (°C)",
        "Ср. давление днём (мм рт. ст.)",
        "Ср. давление вечером (мм рт. ст.)",
    ],
)
# В конечный файл добавляется столбец с датами и название города как заголовок столбца
true_results = true_results.fillna("Данные отсутствуют")
true_results.insert(0, city, ym)
print(true_results)
